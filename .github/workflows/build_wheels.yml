name: build_wheels

on:
  workflow_dispatch:
    inputs:
      is_release:
        description: "Set to true if a release version."
        required: true
        default: false
        type: boolean
      sha:
        description: "The git SHA to use for release.  Only set if needing to publish"
        required: false
        default: ""
        type: string
      version:
        description: "The Release version.  Allowed format: x.y.z[-alphaN | -betaN | -rcN | -devN | -postN]"
        required: false
        default: ""
        type: string
      cxx_change:
        description: "The PR number or SHA if wanting to build against a PR/SHA in the C++ SDK"
        required: false
        type: string
      config:
        description: "JSON formatted object representing various build system input parameters."
        required: false
        default: ""
        type: string

env:
  CBCI_PROJECT_TYPE: "OPERATIONAL"
  CBCI_DEFAULT_PYTHON: "3.9"
  CBCI_SUPPORTED_PYTHON_VERSIONS: "3.9 3.10 3.11 3.12 3.13"
  CBCI_SUPPORTED_X86_64_PLATFORMS: "linux alpine macos windows"
  CBCI_SUPPORTED_ARM64_PLATFORMS: "linux macos"
  CBCI_DEFAULT_LINUX_PLATFORM: "ubuntu-22.04"
  CBCI_DEFAULT_MACOS_X86_64_PLATFORM: "macos-13"
  CBCI_DEFAULT_MACOS_ARM64_PLATFORM: "macos-14"
  CBCI_DEFAULT_WINDOWS_PLATFORM: "windows-2022"
  CBCI_DEFAULT_LINUX_CONTAINER: "slim-bookworm"
  CBCI_DEFAULT_ALPINE_CONTAINER: "alpine-3.19"
  CI_SCRIPTS_URL: "https://raw.githubusercontent.com/thejcfactor/ci_testing/main/ci_scripts"

jobs:
  ci-scripts:
    runs-on: ubuntu-22.04
    steps:
      - name: Download CI Scripts
        run: |
          mkdir ci_scripts
          cd ci_scripts
          curl -o gha.sh ${CI_SCRIPTS_URL}/gha.sh
          curl -o pygha.py ${CI_SCRIPTS_URL}/pygha.py
          curl -o auditwheel_patch ${CI_SCRIPTS_URL}/auditwheel_patch
          ls -alh
      - name: Upload CI scripts
        uses: actions/upload-artifact@v4
        with:
          retention-days: 1
          name: ci_scripts
          path: |
            ci_scripts/

  validate-input:
    runs-on: ubuntu-22.04
    needs: ci-scripts
    env:
      CBCI_IS_RELEASE: ${{ inputs.is_release }}
      CBCI_SHA: ${{ inputs.sha }}
      CBCI_VERSION: ${{ inputs.version }}
      CBCI_CXX_CHANGE: ${{ inputs.cxx_change }}
      CBCI_CONFIG: ${{ inputs.config }}
    steps:
      - name: Download CI scripts
        uses: actions/download-artifact@v4
        with:
          name: ci_scripts
          path: ci_scripts
      - name: Verify Scripts
        run: |
          ls -alh ci_scripts
          chmod +x ci_scripts/gha.sh
          ls -alh ci_scripts
      - name: Display workflow info
        run: |
          ./ci_scripts/gha.sh display_info
      - name: Validate workflow info
        run: |
          ./ci_scripts/gha.sh validate_input ${{ github.workflow }}

  setup:
    runs-on: ubuntu-22.04
    needs: validate-input
    env:
      CBCI_CONFIG: ${{ inputs.config }}
    outputs:
      stage_matrices: ${{ steps.build_matrices.outputs.stage_matrices }}
    steps:
      - uses: actions/checkout@v4
      - name: Download CI scripts
        uses: actions/download-artifact@v4
        with:
          name: ci_scripts
          path: ci_scripts
      - name: Enable CI Scripts
        run: |
          chmod +x ci_scripts/gha.sh
      - name: Setup Python ${{ env.CBCI_DEFAULT_PYTHON }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.CBCI_DEFAULT_PYTHON }}
      - name: Confirm Python version
        run: python -c "import sys; print(sys.version)"
      - name: Build stage matrices
        id: build_matrices
        run: |
          exit_code=0
          STAGE_MATRICES=$(./ci_scripts/gha.sh get_stage_matrices) || exit_code=$?
          if [ $exit_code -ne 0 ]; then
            echo "Failed to obtain sdist name."
            exit 1
          fi
          stage_matrices_json=$(jq -cn --argjson matrices "$STAGE_MATRICES" '$matrices')
          echo "STAGE_MATRICES_JSON=$stage_matrices_json"
          echo "stage_matrices=$stage_matrices_json" >> "$GITHUB_OUTPUT"

  confirm-matrices:
    runs-on: ubuntu-22.04
    needs: setup
    steps:
      - name: Linux Build Wheels Stage
        if: ${{ fromJson(needs.setup.outputs.stage_matrices).build_wheels.has_linux }}
        run: |
          echo "${{ toJson(fromJson(needs.setup.outputs.stage_matrices).build_wheels.linux) }}"
      - name: Macos Build Wheels Stage
        if: ${{ fromJson(needs.setup.outputs.stage_matrices).build_wheels.has_macos }}
        run: |
          echo "${{ toJson(fromJson(needs.setup.outputs.stage_matrices).build_wheels.macos) }}"
      - name: Windows Build Wheels Stage
        if: ${{ fromJson(needs.setup.outputs.stage_matrices).build_wheels.has_windows }}
        run: |
          echo "${{ toJson(fromJson(needs.setup.outputs.stage_matrices).build_wheels.windows) }}"


  lint:
    runs-on: ubuntu-22.04
    needs: validate-input
    env:
      CBCI_VERSION: ${{ inputs.version }}
    steps:
      - uses: actions/checkout@v4
      - name: Download CI scripts
        uses: actions/download-artifact@v4
        with:
          name: ci_scripts
          path: ci_scripts
      - name: Enable CI Scripts
        run: |
          chmod +x ci_scripts/gha.sh
      - name: Setup Python ${{ env.CBCI_DEFAULT_PYTHON }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.CBCI_DEFAULT_PYTHON }}
      - name: Confirm Python version
        run: python -c "import sys; print(sys.version)"
      - name: Execute linting
        run: |
          ls -alh
          ./ci_scripts/gha.sh lint

  sdist:
    runs-on: ubuntu-22.04
    needs: lint
    env:
      CBCI_VERSION: ${{ inputs.version }}
      CBCI_CXX_CHANGE: ${{ inputs.cxx_change }}
      CBCI_CONFIG: ${{ inputs.config }}
    outputs:
      sdist_name: ${{ steps.create_sdist.outputs.sdist_name }}
    steps:
      - name: Checkout (with SHA)
        if: inputs.sha != ''
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.sha }}
          submodules: recursive
          fetch-depth: 0
          fetch-tags: true
      - name: Checkout (no SHA)
        if: inputs.sha == ''
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0
          fetch-tags: true
      - name: Download CI scripts
        uses: actions/download-artifact@v4
        with:
          name: ci_scripts
          path: ci_scripts
      - name: Enable CI Scripts
        run: |
          chmod +x ci_scripts/gha.sh
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.CBCI_DEFAULT_PYTHON }}
      - name: Confirm Python version
        run: python -c "import sys; print(sys.version)"
      - name: Create sdist
        id: create_sdist
        run: |
          ./ci_scripts/gha.sh sdist
          exit_code=0
          sdist_name=$(./ci_scripts/gha.sh get_sdist_name) || exit_code=$?
          if [ $exit_code -ne 0 ]; then
            echo "Failed to obtain sdist name."
            exit 1
          fi
          echo "SDIST_NAME=$sdist_name"
          echo "sdist_name=$sdist_name" >> "$GITHUB_OUTPUT"
      - uses: actions/upload-artifact@v4
        with:
          retention-days: 1
          name: pycbc-artifact-sdist
          path: |
            ./dist/*.tar.gz

  linux-wheels:
    needs: [setup, sdist]
    if: ${{ fromJson(needs.setup.outputs.stage_matrices).build_wheels.has_linux }}
    name: Build Python ${{ matrix.python-version }} ${{ matrix.linux-type }} wheel (${{ matrix.arch }})
    runs-on: ubuntu-22.04
    env:
      CBCI_CONFIG: ${{ inputs.config }}
    strategy:
      fail-fast: true
      matrix: ${{ fromJson(needs.setup.outputs.stage_matrices).build_wheels.linux }}
    steps:
      - name: Download CI scripts
        uses: actions/download-artifact@v4
        with:
          name: ci_scripts
          path: ci_scripts
      - name: Enable CI Scripts
        run: |
          chmod +x ci_scripts/gha.sh
      - name: Download sdist
        uses: actions/download-artifact@v4
        with:
          name: pycbc-artifact-sdist
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Confirm Python version
        run: python -c "import sys; print(sys.version)"
      - name: Set up QEMU
        if: ${{ matrix.arch == 'aarch64' }}
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64
      - name: ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: ${{ github.job }}-${{ matrix.linux-type }}-${{ matrix.arch }}-python${{ matrix.python-version }}
      - name: Run in docker
        uses: addnab/docker-run-action@v3
        with:
          image: jacasey/pycbc_${{ matrix.linux-type == 'manylinux' && 'manylinux2014' || 'musllinux_1_1' }}_${{ matrix.arch }}:1.0.2
          options: >-
            --platform linux/${{ matrix.arch == 'aarch64' && 'arm64' || 'amd64'}}
            -v ${{ github.workspace }}:/work
            -e PYTHON_SDK_WORKDIR=/work
            -e PYTHON_SDK_WHEELHOUSE=/work/wheelhouse/dist
            -e PYTHON_SDK_DEBUG_WHEELHOUSE=/work/wheelhouse/dist_debug
            -e AUDITWHEEL=/work/ci_scripts/auditwheel_patch
            -e WHEEL_PLATFORM=${{ matrix.linux-type == 'manylinux' && 'manylinux2014' || 'musllinux_1_1' }}_${{ matrix.arch }}
            -e SDIST_NAME=${{ needs.sdist.outputs.sdist_name }}
            -e PYTHON_VERSIONS=${{ matrix.python-version }}
            -e PREFER_CCACHE=/work/.ccache
            -e PREFER_VERBOSE_MAKEFILE=ON
            -e CBCI_PROJECT_TYPE=${{ env.CBCI_PROJECT_TYPE }}
            -e "CBCI_CONFIG=${{ env.CBCI_CONFIG }}"
            -e ARCH=${{ matrix.arch }}
            -e CBCI_DEFAULT_PYTHON=${{ env.CBCI_DEFAULT_PYTHON }}
            -e CURRENT_PYTHON_VERSION=${{ matrix.python-version }}
          run: |
            cd /work
            ls -alh
            env
            ./ci_scripts/gha.sh wheel
            if [[ "$ARCH" == "x86_64" && "$CURRENT_PYTHON_VERSION" == $CBCI_DEFAULT_PYTHON ]]; then
              ./ci_scripts/gha.sh save_shared_obj wheelhouse/dist so_output
            fi
      - name: Upload Python ${{ matrix.python-version }} wheel
        uses: actions/upload-artifact@v4
        with:
          retention-days: 1
          name: ${{ matrix.linux-type }}-${{ matrix.arch }}-python${{ matrix.python-version }}-wheel
          path: |
            wheelhouse/dist/*.whl
      - name: Upload Python ${{ matrix.python-version }} debug wheel as artifact
        uses: actions/upload-artifact@v4
        with:
          retention-days: 1
          name: pycbc-debug-artifact-${{ matrix.linux-type }}-${{ matrix.arch }}-python${{ matrix.python-version }}-wheel
          path: |
            wheelhouse/dist_debug/*.whl
      # - name: Save shared object
      #   if: ${{ matrix.python-version == env.CBCI_DEFAULT_PYTHON && matrix.arch == 'x86_64' }}
      #   run: |
      #     ./ci_scripts/gha.sh save_shared_obj wheelhouse/dist so_output
      - name: Upload Python ${{ env.DEFAULT_PYTHON }} x86_64 shared object
        if: ${{ matrix.python-version == env.CBCI_DEFAULT_PYTHON && matrix.arch == 'x86_64' }}
        uses: actions/upload-artifact@v4
        with:
          retention-days: 1
          name: manylinux-x86_64-python${{ env.DEFAULT_PYTHON }}-shared-object
          path: |
            so_output/pycbc_core.so

  macos-wheels:
    needs: [setup, sdist]
    if: ${{ fromJson(needs.setup.outputs.stage_matrices).build_wheels.has_macos }}
    name: Build Python ${{ matrix.python-version }} macos wheel on ${{ matrix.arch }}
    runs-on: ${{ matrix.os }}
    env:
      CBCI_CONFIG: ${{ inputs.config }}
    strategy:
      fail-fast: true
      matrix: ${{ fromJson(needs.setup.outputs.stage_matrices).build_wheels.macos }}
    steps:
      - name: Download CI scripts
        uses: actions/download-artifact@v4
        with:
          name: ci_scripts
          path: ci_scripts
      - name: Enable CI Scripts
        run: |
          chmod +x ci_scripts/gha.sh
      - name: Download sdist
        uses: actions/download-artifact@v4
        with:
          name: pycbc-artifact-sdist
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Confirm Python version
        run: python -c "import sys; print(sys.version)"
      - name: Install ccache
        run: |
          brew install ccache
      - name: ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: ${{ github.job }}-${{ matrix.os }}-${{ matrix.arch }}-python${{ matrix.python-version }}
      - name: Build wheel ${{ matrix.arch }}
        run: |
          ls -alh
          env
          ./ci_scripts/gha.sh wheel ${{ matrix.arch }}
        env:
          PREFER_VERBOSE_MAKEFILE: ON
          PREFER_CCACHE: ${{ github.workspace }}/.ccache
          SDIST_NAME: ${{ needs.sdist.outputs.sdist_name }}
          MACOSX_DEPLOYMENT_TARGET: ${{ matrix.cibw_archs == 'arm64' && '11.0' || '10.15' }}
          ARCHFLAGS: "${{ matrix.arch == 'arm64' && '-arch arm64' || '-arch x86_64' }}"
          CMAKE_OSX_ARCHITECTURES: ${{ matrix.arch == 'arm64' && 'arm64' || 'x86_64' }}
          _PYTHON_HOST_PLATFORM: ${{ matrix.arch == 'arm64' && 'macosx-11-arm64' || 'macosx-10.15-x86_64' }}
      - name: Upload Python ${{ matrix.python-version }} wheel
        uses: actions/upload-artifact@v4
        with:
          retention-days: 1
          name: macos-${{ matrix.arch }}-python${{ matrix.python-version }}-wheel
          path: |
            wheelhouse/dist/*.whl
      - name: Upload Python ${{ matrix.python-version }} debug wheel as artifact
        uses: actions/upload-artifact@v4
        with:
          retention-days: 1
          name: pycbcc-debug-artifact-macos-${{ matrix.arch }}-python${{ matrix.python-version }}-wheel
          path: |
            wheelhouse/dist_debug/*.whl
